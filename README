Linux kernel
============

There are several guides for kernel developers and users. These guides can
be rendered in a number of formats, like HTML and PDF. Please read
Documentation/admin-guide/README.rst first.

In order to build the documentation, use ``make htmldocs`` or
``make pdfdocs``.  The formatted documentation can also be read online at:

    https://www.kernel.org/doc/html/latest/

There are various text files in the Documentation/ subdirectory,
several of them using the Restructured Text markup notation.

Please read the Documentation/process/changes.rst file, as it contains the
requirements for building and running the kernel, and information about
the problems which may result by upgrading your kernel.


For Atri:
=============

On the desktop machine, there are 2 separate Linux distributions. One of the logs into Ubuntu Desktop, and the other one to
Ubuntu Server for testing. Ubuntu Desktop has kernel version 5.3.0 if you need to differentiate them somehow in GRUB.

The location of the project is: ~/Projects/Linux.
The password for Ubuntu Desktop is: smrtfasizmuslobodanarodu (death to fascism - freedom to the people)

In the Linux repository execute `make menuconfig`. Then, press `/` to search
the build flags and type `TOCTTOU`, followed by <Enter>. This should show you
the location and the status of the TikTok flag.

When you want to build the kernel, execute:

```make -j8 tar-pkg```

This will compile all modules and the kernel, and archive them to a tar file.

In ~/Projects/Linux you have several scripts (copy_*) which extract the appropriate *.tar archives to the HDD. copy_current.sh
extracts the current kernel tar archive from the linux subdirectory. The scripts simply extract precompiled kernels
from the appropriate archives - they do not build the kernel. You have to do that separately.

After building the kernel and running the script (extract the kernel, strip the modules of symbols, restart) boot
Ubuntu Server - kernel version 4 (not 5.4.0-rc3). Log in and update GRUB, initramfs and reboot. Then you can boot into the
new kernel.

To boot into the test environment, boot into 5.4.0-rc3+.
That gives you access to Ubuntu Server:
username: utesic
password: testmachine

The test environment boots from the HDD which is connected to the USB3 port.

*** Phoronix Test Suite (PTS) ***

After booting the appropriate kernel, it can be benchmarked using Phoronix Test
Suite. The command for doing so is:

```phoronix-test-suite benchmark <benchmark1> <benchmark2> ... <benchmarkN>```

Recommended benchmarks are:
- apache-1.7.2
- build-linux-kernel-1.10.1
- git-1.1.0
- ipc-benchmark-1.0.0
- nginx-1.2.2
- openssl-1.11.0
- pybench-1.1.3
- redis-1.2.0

The exact settings for the benchmarks can be found in the previous version of
the paper. Make sure to set the appropriate power governor before running a 
benchmark:

```echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor```

Some benchmarks such as Apache, nginX and IPC can also be analyzed using perf.

Perf will need permissions to access kernel symbols. Run the script in the home directory first:

```./prepare_perf.sh ```

To capture statistics using perf, execute: 

```LINUX_PERF_DETAILS=1 phoronix-test-suite benchmark <benchmark>```

This will capture the trace for the last of all executions and save it in
a file with the name ```perf<random>```.

The trace can be then copied and analyzed using perf and the `vmlinux` file containing
symbols.

*** NAS Parallel Benchmark ***

This benchmark comes in two versions: OMP and MPI. OMP uses threads, while MPI
uses processes. Both benchmarks can be found in `./NAS-Parallel-Benchmark`.

Both MPI and OMP folders have bash scripts inside to run the benchmarks and
save the results (`test-script-<full/par/off>.sh). After executing these scripts,
the files can be processed by scripts in the paper's repository.

N.B. Scripts do not change the kernel version: <full/par/off> only signifies 
which directory should be used for the results.

N.B. Make sure to use the appropriate scaling governor.

*** Old TikTok version test ***

`~/tocttou_test_sleep ` had been used to test waiting when writing to marked pages.
It uses 2 threads and dummy system calls which sleep for several seconds to execute
a TOCTTOU attack. With the changes in TikTok, it doesn't look particularly useful
in its current form.

*** Command History ***

Bash history of the commands I was executing on the test machine can be found
in this repo in the file `copied_bash_history.txt`.

*** Code Overview ***

> Though this be madness, yet there is method in â€˜t.
>
> -- Polonius, Hamlet (1602) by William Shakespeare

The main functionality is housed in two places:
- `mm/memory.c:3991`
- `arch/x86/uaccess.c`

The segment in `memory.c` should execute if there is a write to a marked page.
It should then perform the necessary bookkeeping and duplication. The segment
that follows this one take care of COW, so care should be taken when editing it.

The interfaces `copy_from/to_user` are instrumented in `arch/x86/uaccess.c`.
There are multiple version of the interfaces (inline and separate), depending
on the compilation flags. `raw_copy_to_user` is the instrumented internal
function that calls the uninstrumented `__raw_copy_to_user` that writes the
data to user space. `_copy_from_user` is the instrumented function for reading
from the user space which calls `raw_copy_from_user` to read the data.
`copy_from_user_patch` copies over the data from the duplicate that may have
changed in the mapped page.

`_mark_user_pages_read_only` in `uaccess.c` contains the code that ignores
certain system calls and conditions, and executes marking calls for each
accessed page. `page_mark_one` and `page_unmark_one` are passed to the 
reverse mapping visitor to properly mark and unmark all page mappings.
`page_mark_one` is called in `lock_page_from_va`, while `page_unmark_one`
is invoked from `unlock_pages_from_page_frame`.

`include/asm/uaccess.h:166` declares macros which behave like `copy_from/to_user`
for small data types. These macros are redefined to call `copy_from/to_user`.

`common.c` defines the common dispatch path for the system calls. On line
`common.c:287` the system call information is set at the start of the call. It
is cleared on line `common.c:311`. The function `unlock_marked_pages` is
executed at the end of the call to unmark the pages and free allocated
resources.

`memory.c` also stores some of the functions that manipulate page tables.
`memory.c:1020` modifies `copy_page_range` which copies pages during the fork
call. `memory.c:1102` ensures that `zap_pages_pte` frees all metadata when the
address space is being torn down, or the PTEs are unmapped. The semaphore for
the metadata access is taken on line `memory.c:1296` and released on
`memory.c:1309`. `alloc_set_pte` on line `memory.c:3400` marks file-backed pages
when they are loaded, if they are already marked in another process. The
metadata for this marking is allocated at `memory.c:3463` and `filemap.c:2634`
and freed at `memory.c:3481` and `filemap.c:2705`. `memory.c:758` takes care of
COW permissions - COW can be freely broken. It will not affect other processes.

`mprotect.c:124` changes only the saved permissions for marked pages during the
mprotect syscall. `rmap.c` frees the semaphore in a case that was causing a
deadlock in the submitted version of TikTok. There is another release at the
start of the page-fault handler (`fault.c:1386`). `fault.c:1293` also sets
a flag that differentiates a true page-fault from calls to mm_populate which
are used to load swapped pages. `vmscan.c:1712` changes the swapd thread to
ignore marked page-frames when looking for memory to free.